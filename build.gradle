//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id "maven-publish"
    alias libs.plugins.loom
    alias libs.plugins.githubRelease
    alias libs.plugins.minotaur
}

version = "$baseVersion+$branch"
archivesBaseName = project.slug

repositories {
    maven { url "https://api.modrinth.com/maven" }
}

dependencies {
    minecraft libs.mc
    mappings variantOf(libs.yarn) { classifier "v2" }
    modImplementation libs.fl

    modImplementation libs.fapi

    modImplementation libs.spiritVector
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "spirit_vector" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

fabricApi {
    configureDataGeneration()
}

processResources {
    final Map<String, String> meta = [
            version       : version,
            modId         : modId,
            modName       : modName,
            modDescription: modDescription,
            homepage      : "https://modrinth.com/mod/${slug}",
            issues        : "https://github.com/${user}/${slug}/issues",
            sources       : "https://github.com/${user}/${slug}",
            license       : license,
            authors       : authors.split(", ").join("\",\n    \""),
            contributors  : contributors.split(", ").join("\",\n    \""),
            members       : "${authors}. Contributions by ${contributors}",
            mc            : compatibleVersions.split(", ")[0],
            fl            : libs.versions.fl.get(),
            fapi          : libs.versions.fapi.get()
    ]
    inputs.properties(meta)
    filesMatching("*.mod.json") { expand(meta) }
    filesMatching("META-INF/*mods.toml") { expand(meta) }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 21
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

githubRelease {
    token = "$System.env.GITHUB_TOKEN"
    owner = project.user
    repo = slug
    tagName = "v${baseVersion}+${tagBranch}"
    targetCommitish = tagBranch
    releaseAssets = remapJar
    releaseName = "v${baseVersion}"
    allowUploadToExisting = true
    generateReleaseNotes = true
    body = !file("CHANGELOG.md").exists() ? "" : rootProject.file("CHANGELOG.md").text
}

modrinth {
    token = "$System.env.MODRINTH_TOKEN"
    projectId = slug
    versionNumber = project.version
    uploadFile = remapJar
    gameVersions = compatibleVersions.split(", ").toList()
    loaders = compatibleLoaders.split(", ").toList()
    changelog = !file("CHANGELOG.md").exists() ? "" : rootProject.file("CHANGELOG.md").text + "\n\nChangelog: https://github.com/${user}/${slug}/releases/tag/v${baseVersion}+${tagBranch}"
    syncBodyFrom = !file("README.md").exists() ? "" : rootProject.file("README.md").text
    dependencies {
        required.version libs.fapi.get().getName(), libs.versions.fapi.get()
        required.version libs.spiritVector.get().getName(), libs.versions.spiritVector.get()
    }
}

tasks.register("fullRelease") {
    group "publishing"
    dependsOn "runDatagen"
    dependsOn "githubRelease"
    dependsOn "modrinth"
}
